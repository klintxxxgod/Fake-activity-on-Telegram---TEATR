class ActionModal {
    constructor(scenarioBuilder) {
        this.scenarioBuilder = scenarioBuilder;
        this.modal = this.createModal();
        document.body.appendChild(this.modal);
    }

    createModal() {
        const modal = document.createElement('div');
        modal.className = 'action-modal';
        modal.innerHTML = `
            <div class="action-modal-content">
                <div class="modal-header">
                    <h3>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                    <button class="close-btn" id="closeActionModal">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è</label>
                        <select id="actionType">
                            <option value="message">–°–æ–æ–±—â–µ–Ω–∏–µ</option>
                            <option value="reply">–û—Ç–≤–µ—Ç</option>
                            <option value="reaction">–†–µ–∞–∫—Ü–∏—è</option>
                            <option value="media">–ú–µ–¥–∏–∞</option>
                            <option value="media_message">–ú–µ–¥–∏–∞ + –°–æ–æ–±—â–µ–Ω–∏–µ</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>–ê–∫–∫–∞—É–Ω—Ç</label>
                        <input type="text" id="accountName" required>
                    </div>

                    <div class="form-group">
                        <label>–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)</label>
                        <input type="number" id="timeDelay" min="0" value="0">
                    </div>

                    <div class="form-group message-fields">
                        <label>–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                        <textarea id="messageText" rows="4"></textarea>
                    </div>

                    <div class="form-group reply-fields" style="display: none;">
                        <label>ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞</label>
                        <select id="replyId"></select>
                    </div>

                    <div class="form-group reaction-fields" style="display: none;">
                        <label>ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏</label>
                        <select id="reactionId"></select>
                        <label>–†–µ–∞–∫—Ü–∏—è</label>
                        <select id="reactionEmoji">
                            <option value="üëç">üëç –ü–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö</option>
                            <option value="‚ù§Ô∏è">‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ</option>
                            <option value="üî•">üî• –û–≥–æ–Ω—å</option>
                            <option value="üëè">üëè –ê–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã</option>
                            <option value="üòä">üòä –£–ª—ã–±–∫–∞</option>
                            <option value="üéâ">üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫</option>
                            <option value="üëå">üëå –û–∫–µ–π</option>
                        </select>
                    </div>

                    <div class="form-group media-fields" style="display: none;">
                        <label>–ú–µ–¥–∏–∞—Ñ–∞–π–ª</label>
                        <input type="file" id="mediaFile" accept="image/*,video/*">
                    </div>

                    <button class="save-action-btn" id="saveActionBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ</button>
                </div>
            </div>
        `;

        this.initEventListeners(modal);
        return modal;
    }

    initEventListeners(modal) {
        modal.querySelector('#closeActionModal').addEventListener('click', () => {
            this.hide();
        });

        modal.querySelector('#actionType').addEventListener('change', (e) => {
            this.toggleActionFields(e.target.value);
        });

        modal.querySelector('#saveActionBtn').addEventListener('click', async () => {
            const action = await this.createActionFromForm();
            if (action) {
                const editId = modal.querySelector('#saveActionBtn').dataset.editId;
                if (editId) {
                    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    const index = this.scenarioBuilder.actions.findIndex(a => a.id === parseInt(editId));
                    if (index !== -1) {
                        action.id = parseInt(editId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID
                        action.x = this.scenarioBuilder.actions[index].x; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                        action.y = this.scenarioBuilder.actions[index].y;
                        this.scenarioBuilder.actions[index] = action;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        const node = document.querySelector(`.action-node[data-id="${editId}"]`);
                        if (node) node.remove();
                        this.scenarioBuilder.addActionToCanvas(action);
                    }
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    modal.querySelector('#saveActionBtn').dataset.editId = '';
                    modal.querySelector('#saveActionBtn').textContent = '–î–æ–±–∞–≤–∏—Ç—å';
                } else {
                    // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                    this.scenarioBuilder.addActionToCanvas(action);
                }
                this.hide();
                this.clearForm();
            }
        });
    }

    show() {
        this.modal.style.display = 'block';
        this.updateActionSelects();
    }

    hide() {
        this.modal.style.display = 'none';
    }

    toggleActionFields(actionType) {
        const messageFields = this.modal.querySelector('.message-fields');
        const replyFields = this.modal.querySelector('.reply-fields');
        const reactionFields = this.modal.querySelector('.reaction-fields');
        const mediaFields = this.modal.querySelector('.media-fields');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
        [messageFields, replyFields, reactionFields, mediaFields].forEach(
            field => field.style.display = 'none'
        );
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        switch(actionType) {
            case 'media':
                mediaFields.style.display = 'block';
                break;
            case 'media_message':
                mediaFields.style.display = 'block';
                messageFields.style.display = 'block';
                break;
            case 'message':
                messageFields.style.display = 'block';
                break;
            case 'reply':
                messageFields.style.display = 'block';
                replyFields.style.display = 'block';
                break;
            case 'reaction':
                reactionFields.style.display = 'block';
                break;
        }
    }

    updateActionSelects() {
        const replySelect = this.modal.querySelector('#replyId');
        const reactionSelect = this.modal.querySelector('#reactionId');
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        replySelect.innerHTML = '';
        reactionSelect.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –æ–ø—Ü–∏—é
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
        replySelect.appendChild(defaultOption.cloneNode(true));
        reactionSelect.appendChild(defaultOption.cloneNode(true));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ª–∏
        this.scenarioBuilder.actions.forEach(action => {
            if (action.type === 'message' || action.type === 'reply') {
                const option = document.createElement('option');
                option.value = action.id;
                
                let prefix = action.type === 'reply' ? '[–û—Ç–≤–µ—Ç] ' : '[–°–æ–æ–±—â–µ–Ω–∏–µ] ';
                let targetInfo = action.type === 'reply' ? `(–Ω–∞ ${action.replyId}) ` : '';
                let preview = action.message.substring(0, 30) + (action.message.length > 30 ? '...' : '');
                
                option.textContent = `${prefix}ID: ${action.id} ${targetInfo}${preview}`;
                
                replySelect.appendChild(option.cloneNode(true));
                reactionSelect.appendChild(option.cloneNode(true));
            }
        });
    }

    async createActionFromForm() {
        try {
            const type = this.modal.querySelector('#actionType').value;
            const account = this.modal.querySelector('#accountName').value;
            const timeDelay = parseInt(this.modal.querySelector('#timeDelay').value) || 0;
            const replyId = this.modal.querySelector('#replySelect').value || null;
            
            // –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è
            const action = {
                id: this.modal.querySelector('#saveActionBtn').dataset.editId || this.scenarioBuilder.nextId++,
                type,
                account,
                timeDelay,
                replyId: replyId ? parseInt(replyId) : null
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
            if (['message', 'media_message'].includes(type)) {
                const message = this.modal.querySelector('#messageText').value.trim();
                if (!message) {
                    alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
                    return null;
                }
                action.message = message;
            }

            // –î–ª—è –º–µ–¥–∏–∞ –¥–µ–π—Å—Ç–≤–∏–π
            if (type === 'media' || type === 'media_message') {
                const mediaFile = this.modal.querySelector('#mediaFile').files[0];
                if (!mediaFile && !this.modal.querySelector('.current-media')) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª');
                    return null;
                }

                if (mediaFile) {
                    const formData = new FormData();
                    formData.append('media', mediaFile);
                    
                    try {
                        const response = await fetch('http://localhost:5000/upload-media', {
                            method: 'POST',
                            body: formData
                        });
                        
                        const data = await response.json();
                        if (!data.success) {
                            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
                        }
                        
                        action.mediaPath = data.path;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
                        const mediaInfo = document.createElement('div');
                        mediaInfo.className = 'current-media';
                        mediaInfo.textContent = `–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${data.path}`;
                        
                        const mediaFields = this.modal.querySelector('.media-fields');
                        const existingInfo = mediaFields.querySelector('.current-media');
                        if (existingInfo) {
                            existingInfo.remove();
                        }
                        mediaFields.prepend(mediaInfo);
                        
                    } catch (error) {
                        console.error('Error uploading media:', error);
                        alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
                        return null;
                    }
                } else {
                    action.mediaPath = this.modal.querySelector('.current-media').textContent.split(': ')[1];
                }
            }

            return action;
        } catch (error) {
            console.error('Error creating action:', error);
            return null;
        }
    }

    async saveMediaFile(file) {
        const formData = new FormData();
        formData.append('media', file);
        
        try {
            const response = await fetch('/api/upload-media', {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            
            const data = await response.json();
            return data.path; // –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        } catch (error) {
            console.error('Error uploading media:', error);
            throw error;
        }
    }

    clearForm() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        this.modal.querySelector('#actionType').value = 'message';
        this.modal.querySelector('#accountName').value = '';
        this.modal.querySelector('#timeDelay').value = '0';
        this.modal.querySelector('#messageText').value = '';
        this.modal.querySelector('#replyId').value = '';
        this.modal.querySelector('#reactionId').value = '';
        this.modal.querySelector('#reactionEmoji').value = 'üëç';
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        const mediaFields = this.modal.querySelector('.media-fields');
        const existingMediaInfo = mediaFields.querySelector('.current-media');
        if (existingMediaInfo) {
            existingMediaInfo.remove();
        }
        
        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞
        const mediaFileInput = this.modal.querySelector('#mediaFile');
        if (mediaFileInput) {
            mediaFileInput.value = '';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π
        this.toggleActionFields('message');
    }

    editAction(action) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        const mediaFields = this.modal.querySelector('.media-fields');
        const existingMediaInfo = mediaFields.querySelector('.current-media');
        if (existingMediaInfo) {
            existingMediaInfo.remove();
        }

        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞
        const mediaFileInput = this.modal.querySelector('#mediaFile');
        if (mediaFileInput) {
            mediaFileInput.value = '';
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è
        this.modal.querySelector('#actionType').value = action.type;
        this.modal.querySelector('#accountName').value = action.account;
        this.modal.querySelector('#timeDelay').value = action.timeDelay;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        this.toggleActionFields(action.type);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch(action.type) {
            case 'message':
                this.modal.querySelector('#messageText').value = action.message;
                break;
            case 'reply':
                this.modal.querySelector('#messageText').value = action.message;
                this.modal.querySelector('#replyId').value = action.replyId;
                break;
            case 'reaction':
                this.modal.querySelector('#reactionId').value = action.reactionId;
                this.modal.querySelector('#reactionEmoji').value = action.reaction;
                break;
            case 'media':
            case 'media_message':
                if (action.mediaPath) {
                    const mediaInfo = document.createElement('div');
                    mediaInfo.className = 'current-media';
                    mediaInfo.textContent = `–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${action.mediaPath}`;
                    mediaFields.prepend(mediaInfo);
                }
                if (action.type === 'media_message') {
                    this.modal.querySelector('#messageText').value = action.message || '';
                }
                break;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        this.modal.querySelector('#saveActionBtn').dataset.editId = action.id;
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        this.modal.querySelector('#saveActionBtn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.show();
    }
} 