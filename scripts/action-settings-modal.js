class ActionSettingsModal {
    constructor(scenarioBuilder) {
        this.scenarioBuilder = scenarioBuilder;
        this.modal = document.getElementById('actionSettingsModal');
        this.dynamicFields = document.getElementById('dynamicFields');
        this.initEventListeners();
    }

    initEventListeners() {
        document.getElementById('actionType').addEventListener('change', (e) => {
            this.updateFields(e.target.value);
        });

        document.querySelector('.close').addEventListener('click', () => {
            this.hide();
        });

        document.getElementById('saveActionBtn').addEventListener('click', () => {
            this.saveAction();
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        this.updateFields(document.getElementById('actionType').value);
    }

    updateFields(actionType) {
        this.dynamicFields.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–æ–º–µ reaction
        if (actionType !== 'reaction') {
            this.addReplyField();
        }

        switch (actionType) {
            case 'message':
                this.addMessageField();
                break;
            case 'media':
                this.addMediaField();
                break;
            case 'media_message':
                this.addMediaField();
                this.addMessageField();
                break;
            case 'reaction':
                this.addReactionField();
                break;
        }
    }

    addReplyField() {
        const div = document.createElement('div');
        div.className = 'form-group';
        div.innerHTML = `
            <label>–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
            <select id="replySelect">
                <option value="">–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞</option>
                ${this.getExistingMessagesOptions()}
            </select>
        `;
        this.dynamicFields.appendChild(div);
    }

    addMessageField() {
        const div = document.createElement('div');
        div.className = 'form-group';
        div.innerHTML = `
            <label>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</label>
            <textarea id="messageText" rows="4"></textarea>
        `;
        this.dynamicFields.appendChild(div);
    }

    addMediaField() {
        const div = document.createElement('div');
        div.className = 'form-group';
        div.innerHTML = `
            <label>–ú–µ–¥–∏–∞—Ñ–∞–π–ª</label>
            <input type="file" id="mediaFile" accept="image/*,video/*">
            <div class="media-preview"></div>
        `;
        this.dynamicFields.appendChild(div);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        div.querySelector('#mediaFile').addEventListener('change', (e) => {
            this.handleMediaUpload(e);
        });
    }

    addReactionField() {
        const div = document.createElement('div');
        div.className = 'form-group';
        div.innerHTML = `
            <label>–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
            <select id="reactionMessageSelect" required>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</option>
                ${this.getExistingMessagesOptions()}
            </select>
            <label>–≠–º–æ–¥–∑–∏</label>
            <select id="reactionEmoji">
                <option value="üëç">üëç –ü–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö</option>
                <option value="‚ù§Ô∏è">‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ</option>
                <option value="üî•">üî• –û–≥–æ–Ω—å</option>
                <option value="üëè">üëè –ê–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã</option>
                <option value="üòä">üòä –£–ª—ã–±–∫–∞</option>
                <option value="üéâ">üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫</option>
                <option value="üëå">üëå –û–∫–µ–π</option>
            </select>
        `;
        this.dynamicFields.appendChild(div);
    }

    getExistingMessagesOptions() {
        return this.scenarioBuilder.actions
            .filter(a => ['message', 'media', 'media_message'].includes(a.type))
            .map(a => {
                let label = `–î–µ–π—Å—Ç–≤–∏–µ #${a.id} (${a.type})`;
                if (a.message) {
                    label += `: ${a.message.substring(0, 30)}${a.message.length > 30 ? '...' : ''}`;
                }
                if (a.mediaPath) {
                    label += ' [–º–µ–¥–∏–∞]';
                }
                return `<option value="${a.id}">${label}</option>`;
            })
            .join('');
    }

    show() {
        this.modal.style.display = 'block';
        this.updateFields(document.getElementById('actionType').value);
    }

    hide() {
        this.modal.style.display = 'none';
    }

    async handleMediaUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            const formData = new FormData();
            formData.append('media', file);

            const response = await fetch('http://localhost:5000/upload-media', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.error);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
            const mediaPreview = document.querySelector('.media-preview');
            mediaPreview.innerHTML = `–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${data.path}`;
            mediaPreview.dataset.path = data.path;

        } catch (error) {
            console.error('Error uploading media:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: ' + error.message);
        }
    }

    async saveAction() {
        try {
            const actionType = document.getElementById('actionType').value;
            const account = document.getElementById('accountName').value;
            const timeDelay = parseInt(document.getElementById('timeDelay').value) || 0;
            
            // –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è
            const action = {
                id: this.modal.querySelector('#saveActionBtn').dataset.editId || this.scenarioBuilder.nextId++,
                type: actionType,
                account: account,
                timeDelay: timeDelay,
                x: 50, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Ö–æ–ª—Å—Ç–µ
                y: 50
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ reply –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–æ–º–µ reaction
            if (actionType !== 'reaction') {
                const replySelect = document.getElementById('replySelect');
                if (replySelect && replySelect.value) {
                    action.replyId = parseInt(replySelect.value);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            switch (actionType) {
                case 'message':
                    action.message = document.getElementById('messageText').value;
                    break;

                case 'media':
                    const mediaFile = document.getElementById('mediaFile');
                    const mediaPreview = document.querySelector('.media-preview');
                    if (mediaPreview && mediaPreview.dataset.path) {
                        action.mediaPath = mediaPreview.dataset.path;
                    } else if (mediaFile.files.length > 0) {
                        const formData = new FormData();
                        formData.append('media', mediaFile.files[0]);
                        
                        const response = await fetch('http://localhost:5000/upload-media', {
                            method: 'POST',
                            body: formData
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            action.mediaPath = result.path;
                        } else {
                            throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞');
                        }
                    }
                    break;

                case 'media_message':
                    action.message = document.getElementById('messageText').value;
                    const mediaFileMsg = document.getElementById('mediaFile');
                    const mediaPreviewMsg = document.querySelector('.media-preview');
                    if (mediaPreviewMsg && mediaPreviewMsg.dataset.path) {
                        action.mediaPath = mediaPreviewMsg.dataset.path;
                    } else if (mediaFileMsg.files.length > 0) {
                        const formData = new FormData();
                        formData.append('media', mediaFileMsg.files[0]);
                        
                        const response = await fetch('http://localhost:5000/upload-media', {
                            method: 'POST',
                            body: formData
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            action.mediaPath = result.path;
                        } else {
                            throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞');
                        }
                    }
                    break;

                case 'reaction':
                    action.reaction = document.getElementById('reactionEmoji').value;
                    action.reactionId = parseInt(document.getElementById('reactionMessageSelect').value);
                    break;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π
            this.scenarioBuilder.addActionToCanvas(action);
            this.hide();
            return true;

        } catch (error) {
            console.error('Error saving action:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ' + error.message);
            return false;
        }
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...
} 